name: Node.js Server with Playit (Debug v3)

on: [workflow_dispatch]

jobs:
  run-node-server:
    runs-on: windows-latest

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    # - name: Set up Node.js
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: '18.x'

    - name: Create Firewall Rule for Port 3000
      run: New-NetFirewallRule -DisplayName "Allow Node.js (Port 3000)" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3000 -ErrorAction Stop
      shell: pwsh

    - name: Install dependencies (if package.json exists)
      run: |
        if (Test-Path package.json) {
          npm install
        } else {
          Write-Host "No package.json found, skipping npm install."
        }
      shell: pwsh

    - name: Start Node.js Server and Capture Output
      run: |
        Write-Host "Attempting to start Node.js server and redirect output..."
        $stdOutPath = Join-Path $env:GITHUB_WORKSPACE "node_stdout.log"
        $stdErrPath = Join-Path $env:GITHUB_WORKSPACE "node_stderr.log"

        if (Test-Path server.js) {
          Write-Host "Starting 'node server.js' with output redirection to:"
          Write-Host "STDOUT: $stdOutPath"
          Write-Host "STDERR: $stdErrPath"
          # Using cmd /c to ensure redirection works reliably for Node.js background process
          Start-Process cmd -ArgumentList "/c node server.js 1> $stdOutPath 2> $stdErrPath" -NoNewWindow
          Write-Host "Node.js process launched."
        } elseif (Test-Path package.json -and ((Get-Content package.json | ConvertFrom-Json).scripts.start)) {
          Write-Host "Starting 'npm start' with output redirection (experimental for background):"
          Write-Host "STDOUT: $stdOutPath"
          Write-Host "STDERR: $stdErrPath"
          Start-Process cmd -ArgumentList "/c npm start 1> $stdOutPath 2> $stdErrPath" -NoNewWindow
          Write-Host "npm start process launched."
        } else {
          Write-Host "ERROR: Could not find server.js or npm start script."
          exit 1
        }
        Write-Host "Waiting 15 seconds for Node.js server to initialize/error out and write logs..."
        Start-Sleep -Seconds 15
      shell: pwsh

    - name: Display Node.js Logs
      run: |
        Write-Host "---- Contents of node_stdout.log ----"
        if (Test-Path node_stdout.log) {
          Get-Content node_stdout.log -ErrorAction SilentlyContinue
        } else {
          Write-Host "node_stdout.log not found."
        }
        Write-Host "---- Contents of node_stderr.log ----"
        if (Test-Path node_stderr.log) {
          Get-Content node_stderr.log -ErrorAction SilentlyContinue
        } else {
          Write-Host "node_stderr.log not found."
        }
        Write-Host "------------------------------------"
      shell: pwsh
      # Always run this step to see the logs
      if: always()


    - name: Check Network Listeners (Port 3000) - Non-blocking
      run: |
        Write-Host "Checking network listeners for port 3000 AFTER attempting to start Node.js..."
        netstat -ano | findstr ":3000"
        Write-Host "If no output above this line containing ':3000', port was NOT listening."
      shell: pwsh
      continue-on-error: true

    - name: Test Local Connection to Node.js Server
      run: |
        Write-Host "Attempting to connect to Node.js server locally on 127.0.0.1:3000..."
        try {
          Invoke-WebRequest -Uri "http://127.0.0.1:3000" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
          Write-Host "SUCCESS: Locally connected to Node.js server on 127.0.0.1:3000."
        } catch {
          Write-Host "FAILURE: Failed to connect to Node.js server locally on 127.0.0.1:3000."
          Write-Host "Error details: $($_.Exception.Message)"
        }
      shell: pwsh
      # This step's success depends heavily on Node.js logs and netstat
      if: always() # Run this to see the outcome regardless of netstat

    - name: Download Playit Agent
      run: Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe" -ErrorAction Stop
      shell: pwsh

    - name: Run Playit Agent in Background
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PLAYIT_AUTH_KEY }}
      run: |
        Write-Host "Starting playit.exe with secret key..."
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow -Wait
        Write-Host "Playit agent started. Waiting 15 seconds..."
        Start-Sleep -Seconds 15
      shell: pwsh

    - name: Keep Workflow Running
      run: |
        Write-Host "Setup complete. Review Node.js logs, netstat, and local connection test."
        Start-Sleep -Seconds 11800
      shell: pwsh
