name: Server

on:
  workflow_dispatch:
    
jobs:
  b:
    runs-on: windows-latest

    steps:
      - name: Clone repo and install dependencies
        env:
          k: ${{ secrets.PAT }}
        run: |
          git clone https://$env:k@github.com/mohdshibili/AccaMate.git z
          cd z\server
          npm i

      - name: Install Python dependencies
        run: |
          pip install pyrogram TgCrypto aiofiles

      - name: Download and install cloudflared and playit
        run: |
          iwr -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "$env:USERPROFILE\cloudflared.exe"
          iwr -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\p.exe"
          
      - name: Start servers and tunnels
        env:
          CLOUDFLARE_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
          CLOUDFLARE_TUNNEL_TOKEN_1: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN_1 }}
          t: ${{ secrets.DEAR_FIN }}
        run: |
          # Create logs directory
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\logs"
          
          # Get current UTC hour
          $currentHour = (Get-Date).ToUniversalTime().Hour
          Write-Host "Current UTC hour: $currentHour"
          
          # Determine which token to use based on time ranges
          # 12am-4am (0-3), 8am-12pm (8-11), 4pm-8pm (16-19) use CLOUDFLARE_TUNNEL_TOKEN
          # 4am-8am (4-7), 12pm-4pm (12-15), 8pm-12am (20-23) use CLOUDFLARE_TUNNEL_TOKEN_1
          if (($currentHour -ge 0 -and $currentHour -lt 4) -or 
              ($currentHour -ge 8 -and $currentHour -lt 12) -or 
              ($currentHour -ge 16 -and $currentHour -lt 20)) {
              $tunnelToken = $env:CLOUDFLARE_TUNNEL_TOKEN
              Write-Host "Using CLOUDFLARE_TUNNEL_TOKEN (Primary token)"
          } else {
              $tunnelToken = $env:CLOUDFLARE_TUNNEL_TOKEN_1
              Write-Host "Using CLOUDFLARE_TUNNEL_TOKEN_1 (Secondary token)"
          }
          
          # Start Node.js in background
          Start-Process -FilePath "npm" -ArgumentList "run", "start" -WorkingDirectory "$env:GITHUB_WORKSPACE\z\server" -RedirectStandardOutput "$env:GITHUB_WORKSPACE\logs\node.log" -RedirectStandardError "$env:GITHUB_WORKSPACE\logs\node-error.log" -NoNewWindow
          
          # Start Python bot.py in background
          Start-Process -FilePath "python" -ArgumentList "bot.py" -WorkingDirectory "$env:GITHUB_WORKSPACE\z\server" -RedirectStandardOutput "$env:GITHUB_WORKSPACE\logs\bot.log" -RedirectStandardError "$env:GITHUB_WORKSPACE\logs\bot-error.log" -NoNewWindow
          
          # Start Python file_server.py in background
          Start-Process -FilePath "python" -ArgumentList "file_server.py" -WorkingDirectory "$env:GITHUB_WORKSPACE\z\server" -RedirectStandardOutput "$env:GITHUB_WORKSPACE\logs\file_server.log" -RedirectStandardError "$env:GITHUB_WORKSPACE\logs\file_server-error.log" -NoNewWindow
          
          # Give services a moment to start
          Write-Host "Starting Node.js server and Python services..."
          Start-Sleep -Seconds 10
          
          # Check if Node.js server started successfully
          Write-Host "===== NODE.JS SERVER STARTUP LOG ====="
          if (Test-Path "$env:GITHUB_WORKSPACE\logs\node.log") {
              $nodeLog = Get-Content -Path "$env:GITHUB_WORKSPACE\logs\node.log" -ErrorAction SilentlyContinue
              if ($nodeLog) {
                  $nodeLog | ForEach-Object { Write-Host $_ }
              } else {
                  Write-Host "Node.js log file exists but is empty (server may still be starting)"
              }
          } else {
              Write-Host "Node.js log file not found"
          }
          
          # Check for any startup errors
          if (Test-Path "$env:GITHUB_WORKSPACE\logs\node-error.log") {
              $errorLog = Get-Content -Path "$env:GITHUB_WORKSPACE\logs\node-error.log" -ErrorAction SilentlyContinue
              if ($errorLog) {
                  Write-Host "===== NODE.JS SERVER ERRORS ====="
                  $errorLog | ForEach-Object { Write-Host $_ }
              }
          }
          
          # Check Python bot startup
          Write-Host "===== PYTHON BOT STARTUP LOG ====="
          if (Test-Path "$env:GITHUB_WORKSPACE\logs\bot.log") {
              $botLog = Get-Content -Path "$env:GITHUB_WORKSPACE\logs\bot.log" -ErrorAction SilentlyContinue
              if ($botLog) {
                  $botLog | ForEach-Object { Write-Host $_ }
              } else {
                  Write-Host "Bot log file exists but is empty (bot may still be starting)"
              }
          } else {
              Write-Host "Bot log file not found"
          }
          
          # Check Python file server startup
          Write-Host "===== PYTHON FILE SERVER STARTUP LOG ====="
          if (Test-Path "$env:GITHUB_WORKSPACE\logs\file_server.log") {
              $fileServerLog = Get-Content -Path "$env:GITHUB_WORKSPACE\logs\file_server.log" -ErrorAction SilentlyContinue
              if ($fileServerLog) {
                  $fileServerLog | ForEach-Object { Write-Host $_ }
              } else {
                  Write-Host "File server log file exists but is empty (server may still be starting)"
              }
          } else {
              Write-Host "File server log file not found"
          }
          Write-Host "=================================="
          
          # Start Cloudflare Tunnel with selected token
          Start-Process -FilePath "$env:USERPROFILE\cloudflared.exe" -ArgumentList "tunnel", "run", "--protocol", "http2", "--token", "$tunnelToken" -RedirectStandardOutput "$env:GITHUB_WORKSPACE\logs\cloudflared.log" -RedirectStandardError "$env:GITHUB_WORKSPACE\logs\cloudflared-error.log" -NoNewWindow
          
          # Start playit tunnel
          Start-Process -FilePath "$env:USERPROFILE\p.exe" -ArgumentList "--secret", "$env:t" -RedirectStandardOutput "$env:GITHUB_WORKSPACE\logs\playit.log" -RedirectStandardError "$env:GITHUB_WORKSPACE\logs\playit-error.log" -NoNewWindow
          
          # Keep the workflow running (logs are being saved to files)
          Write-Host "All servers and tunnels started. Logs are being saved to files..."
          Write-Host "Node.js logs: $env:GITHUB_WORKSPACE\logs\node.log"
          Write-Host "Python bot logs: $env:GITHUB_WORKSPACE\logs\bot.log"
          Write-Host "Python file server logs: $env:GITHUB_WORKSPACE\logs\file_server.log"
          Write-Host "Cloudflare tunnel logs: $env:GITHUB_WORKSPACE\logs\cloudflared.log"
          Write-Host "Playit tunnel logs: $env:GITHUB_WORKSPACE\logs\playit.log"
          Write-Host "Workflow will automatically stop after 4 hours and 30 minutes..."
          
          # Calculate end time (4.5 hours from now)
          $startTime = Get-Date
          $endTime = $startTime.AddHours(4.5)
          Write-Host "Started at: $($startTime.ToString('yyyy-MM-dd HH:mm:ss UTC'))"
          Write-Host "Will stop at: $($endTime.ToString('yyyy-MM-dd HH:mm:ss UTC'))"
          
          # Run for 4 hours and 30 minutes (16,200 seconds)
          $totalSeconds = 4.5 * 3600  # 4.5 hours in seconds
          $checkInterval = 300        # Check every 5 minutes
          $elapsedSeconds = 0
          
          while ($elapsedSeconds -lt $totalSeconds) {
            Start-Sleep -Seconds $checkInterval
            $elapsedSeconds += $checkInterval
            
            # Show progress every 30 minutes
            if ($elapsedSeconds % 1800 -eq 0) {
              $remainingHours = [math]::Round(($totalSeconds - $elapsedSeconds) / 3600, 1)
              Write-Host "Running... $remainingHours hours remaining"
            }
          }
          
          Write-Host "4.5 hours completed. Stopping processes and saving logs..."
          
          # Stop processes gracefully (they will be terminated when job ends anyway)
          Get-Process -Name "node" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "python" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "cloudflared" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "p" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          
          Write-Host "Workflow completed successfully after 4 hours and 30 minutes."
        shell: pwsh

      # This step runs even if the previous step is cancelled or fails
      - name: Save logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            logs/
          retention-days: 30
